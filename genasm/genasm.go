//go:build amd64 && !noasm
// +build amd64,!noasm

package main

import (
	"fmt"
	"io"
	"os"
	"text/template"
)

func main() {
	err := GenerateFiles()
	if err != nil {
		_, _ = fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
}

type AsmFn struct {
	Name   string
	Doc    string
	FnKind FnKind
	Arch   Arch
	Body   string
}

type FnKind string

const (
	Float64x2 FnKind = "float64x2"
	Float64x4 FnKind = "float64x4"
)

type Arch string

const (
	X86   Arch = "x86"
	Arm64 Arch = "arm64"
)

func GenerateFiles() error {

	err := GenerateFile("../floats/f64/f64_avx2_gen.s", f64asm, X86, "//go:build amd64 && !noasm")
	if err != nil {
		return err
	}

	err = GenerateFile("../floats/f64/f64_neon_gen.s", f64asm, Arm64, "//go:build arm64 && !noasm")
	if err != nil {
		return err
	}
	return nil
}

func GenerateFile(filename string, fs []AsmFn, arch Arch, header string) error {
	f, err := os.Create(filename)
	defer f.Close()
	if err != nil {
		return err
	}
	_, _ = f.WriteString(header + "\n")
	_, _ = f.WriteString("// DO NOT EDIT - generated by genasm.go\n\n")
	_, _ = f.WriteString("#include \"textflag.h\"\n\n")

	err = GenerateAll(f, fs, arch)
	if err != nil {
		return err
	}

	err = f.Close()
	if err != nil {
		return err
	}

	fmt.Println("generated", filename)
	return nil
}

func GenerateAll(w io.Writer, fs []AsmFn, arch Arch) error {
	for _, f := range fs {
		if f.Arch != arch {
			continue
		}
		err := Generate(w, f)
		if err != nil {
			return err
		}
	}
	return nil
}

func Generate(w io.Writer, f AsmFn) error {

	name := string(f.FnKind) + "_" + string(f.Arch)
	filename := "templates/" + name + ".s"
	bs, err := os.ReadFile(filename)
	if err != nil {
		return err
	}
	t, err := template.New(name).Parse(string(bs))
	if err != nil {
		return err
	}

	err = t.Execute(w, f)
	if err != nil {
		return err
	}
	return nil
}
